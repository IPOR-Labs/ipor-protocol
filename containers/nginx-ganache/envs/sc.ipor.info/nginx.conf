worker_processes                            5;

events {
    worker_connections                      1024;
}

http {

    server_tokens                           off;

    server {
        listen                              34555 ssl http2;
        listen                              [::]:34555 ssl http2;

        server_name                         sc.ipor.info;

        error_page                          401 /error_docs/401/401.html;
        error_page                          404 /error_docs/404/404.html;
        error_page                          500 502 503 504 /error_docs/50x/50x.html;

        ssl_certificate                     /etc/nginx/cert/tls.crt;
        ssl_certificate_key                 /etc/nginx/cert/tls.key;

        ssl_session_cache                   shared:NginxCache123:50m;
        ssl_session_timeout                 5m;

        ssl_prefer_server_ciphers           on;

        ssl_ciphers                         'ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS';

        ssl_dhparam                         /etc/nginx/cert/dhparam.pem;

        ssl_protocols                       TLSv1 TLSv1.1 TLSv1.2;

        ssl_stapling                        on;
        ssl_stapling_verify                 on;
        ssl_trusted_certificate             /etc/nginx/cert/fullchain.cer;
        resolver                            8.8.8.8 valid=300s ipv6=off;
        resolver_timeout                    5s;

        proxy_pass_header                   Server;

        #add_header                         Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        #add_header                         Strict-Transport-Security "max-age=31536000" always;
        add_header                          Strict-Transport-Security "max-age=31536000; includeSubDomains";

        access_log                          /dev/stdout;
        error_log                           /dev/stderr;

        ####################################
        # LOCATIONS
        ####################################

        location /reset-sc {

            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD, DELETE, PUT, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-CustomHeader';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $http_origin always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD, DELETE, PUT, PATCH';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-CustomHeader';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            auth_basic                          "Restricted Access";
            auth_basic_user_file                /etc/nginx/htpasswd.users;

            set $ssh_ok '';
            set $ssh_stdout '';
            set $ssh_stderr '';
            set $ssh_reason '';
            set $ssh_status '';

            content_by_lua_block {
                local shell = require "resty.shell"

                local stdin = ""
                local timeout = 300000
                local max_size = 10485760

                local ok, stdout, stderr, reason, status = shell.run("ssh -o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -l ubuntu -i /etc/nginx/keys/ipor-warren.pem host.docker.internal '. /home/ubuntu/.bash_profile && cd /home/ubuntu/repos/ipor-protocol && . /home/ubuntu/repos/ipor-protocol/run.sh m p'", stdin, timeout, max_size)

                ngx.var.ssh_ok = ok
                ngx.var.ssh_stdout = stdout
                ngx.var.ssh_stderr = stderr
                ngx.var.ssh_reason = reason
                ngx.var.ssh_status = status

                if (ok) then
                    ngx.status = 200
                    ngx.exit(ngx.OK)
                else
                    ngx.log(ngx.ERR, "SSH returned ERROR: status: " .. status .. " | stderr: " .. stderr)
                    ngx.status = 400
                end
            }

            header_filter_by_lua_block {
                ngx.header["Content-Type"] = "text/plain"
            }

            body_filter_by_lua_block {
                local body = "ok: " .. ngx.var.ssh_ok .. "\n\n"
                body = body .. "status: " .. ngx.var.ssh_status .. "\n\n"
                body = body .. "reason: " .. ngx.var.ssh_reason .. "\n\n"
                body = body .. "stderr: " .. ngx.var.ssh_stderr .. "\n\n"
                body = body .. "stdout: " .. ngx.var.ssh_stdout .. "\n"
                ngx.arg[1] = body
            }

        }

        location /reset-bc {

            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD, DELETE, PUT, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-CustomHeader';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $http_origin always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD, DELETE, PUT, PATCH';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-CustomHeader';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            auth_basic                          "Restricted Access";
            auth_basic_user_file                /etc/nginx/htpasswd.users;

            set $ssh_ok '';
            set $ssh_stdout '';
            set $ssh_stderr '';
            set $ssh_reason '';
            set $ssh_status '';

            content_by_lua_block {
                local shell = require "resty.shell"

                local stdin = ""
                local timeout = 300000
                local max_size = 10485760

                local ok, stdout, stderr, reason, status = shell.run("ssh -o StrictHostKeyChecking=accept-new -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR -l ubuntu -i /etc/nginx/keys/ipor-warren.pem host.docker.internal '. /home/ubuntu/.bash_profile && cd /home/ubuntu/repos/ipor-protocol && . /home/ubuntu/repos/ipor-protocol/run.sh c'", stdin, timeout, max_size)

                ngx.var.ssh_ok = ok
                ngx.var.ssh_stdout = stdout
                ngx.var.ssh_stderr = stderr
                ngx.var.ssh_reason = reason
                ngx.var.ssh_status = status

                if (ok) then
                    ngx.status = 200
                    ngx.exit(ngx.OK)
                else
                    ngx.log(ngx.ERR, "SSH returned ERROR: status: " .. status .. " | stderr: " .. stderr)
                    ngx.status = 400
                end
            }

            header_filter_by_lua_block {
                ngx.header["Content-Type"] = "text/plain"
            }

            body_filter_by_lua_block {
                local body = "ok: " .. ngx.var.ssh_ok .. "\n\n"
                body = body .. "status: " .. ngx.var.ssh_status .. "\n\n"
                body = body .. "reason: " .. ngx.var.ssh_reason .. "\n\n"
                body = body .. "stderr: " .. ngx.var.ssh_stderr .. "\n\n"
                body = body .. "stdout: " .. ngx.var.ssh_stdout .. "\n"
                ngx.arg[1] = body
            }

        }

        # DEFAULT
        location / {

            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD, DELETE, PUT, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-CustomHeader';
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;

            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' $http_origin always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, HEAD, DELETE, PUT, PATCH';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-CustomHeader';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            auth_basic                          "Restricted Access";
            auth_basic_user_file                /etc/nginx/htpasswd.users;

            proxy_pass                          http://ipor-protocol-ganache:8545;
            proxy_redirect                      off;
            proxy_buffering                     off;

            proxy_http_version                  1.1;
            proxy_set_header Connection         "Keep-Alive";
            proxy_set_header Proxy-Connection   "Keep-Alive";

            include                             /etc/nginx/nginx.api-proxy.conf;
        }

        location /error_docs {
            alias                               /usr/share/nginx/html/errors/;
            log_not_found                       off;
        }
    }

}
